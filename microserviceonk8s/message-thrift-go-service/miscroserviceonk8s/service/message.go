// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type MessageService interface {
  // Parameters:
  //  - Mobile
  //  - Message
  SendMobileMessage(ctx context.Context, mobile string, message string) (r bool, err error)
  // Parameters:
  //  - Email
  //  - Message
  SendEmailMessage(ctx context.Context, email string, message string) (r bool, err error)
}

type MessageServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewMessageService instead
func NewMessageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MessageServiceClient {
  return &MessageServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewMessageService instead
func NewMessageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MessageServiceClient {
  return &MessageServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMessageServiceClient(c thrift.TClient) *MessageServiceClient {
  return &MessageServiceClient{
    c: c,
  }
}

// Parameters:
//  - Mobile
//  - Message
func (p *MessageServiceClient) SendMobileMessage(ctx context.Context, mobile string, message string) (r bool, err error) {
  var _args0 MessageServiceSendMobileMessageArgs
  _args0.Mobile = mobile
  _args0.Message = message
  var _result1 MessageServiceSendMobileMessageResult
  if err = p.c.Call(ctx, "sendMobileMessage", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Email
//  - Message
func (p *MessageServiceClient) SendEmailMessage(ctx context.Context, email string, message string) (r bool, err error) {
  var _args2 MessageServiceSendEmailMessageArgs
  _args2.Email = email
  _args2.Message = message
  var _result3 MessageServiceSendEmailMessageResult
  if err = p.c.Call(ctx, "sendEmailMessage", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type MessageServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MessageService
}

func (p *MessageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MessageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MessageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMessageServiceProcessor(handler MessageService) *MessageServiceProcessor {

  self4 := &MessageServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["sendMobileMessage"] = &messageServiceProcessorSendMobileMessage{handler:handler}
  self4.processorMap["sendEmailMessage"] = &messageServiceProcessorSendEmailMessage{handler:handler}
return self4
}

func (p *MessageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type messageServiceProcessorSendMobileMessage struct {
  handler MessageService
}

func (p *messageServiceProcessorSendMobileMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageServiceSendMobileMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendMobileMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageServiceSendMobileMessageResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendMobileMessage(ctx, args.Mobile, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMobileMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendMobileMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendMobileMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type messageServiceProcessorSendEmailMessage struct {
  handler MessageService
}

func (p *messageServiceProcessorSendEmailMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MessageServiceSendEmailMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendEmailMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MessageServiceSendEmailMessageResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.SendEmailMessage(ctx, args.Email, args.Message); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEmailMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendEmailMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("sendEmailMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Mobile
//  - Message
type MessageServiceSendMobileMessageArgs struct {
  Mobile string `thrift:"mobile,1" db:"mobile" json:"mobile"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewMessageServiceSendMobileMessageArgs() *MessageServiceSendMobileMessageArgs {
  return &MessageServiceSendMobileMessageArgs{}
}


func (p *MessageServiceSendMobileMessageArgs) GetMobile() string {
  return p.Mobile
}

func (p *MessageServiceSendMobileMessageArgs) GetMessage() string {
  return p.Message
}
func (p *MessageServiceSendMobileMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageServiceSendMobileMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mobile = v
}
  return nil
}

func (p *MessageServiceSendMobileMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *MessageServiceSendMobileMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMobileMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageServiceSendMobileMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobile", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mobile: ", p), err) }
  if err := oprot.WriteString(string(p.Mobile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mobile: ", p), err) }
  return err
}

func (p *MessageServiceSendMobileMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *MessageServiceSendMobileMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageServiceSendMobileMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MessageServiceSendMobileMessageResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMessageServiceSendMobileMessageResult() *MessageServiceSendMobileMessageResult {
  return &MessageServiceSendMobileMessageResult{}
}

var MessageServiceSendMobileMessageResult_Success_DEFAULT bool
func (p *MessageServiceSendMobileMessageResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MessageServiceSendMobileMessageResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MessageServiceSendMobileMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MessageServiceSendMobileMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageServiceSendMobileMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MessageServiceSendMobileMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMobileMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageServiceSendMobileMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MessageServiceSendMobileMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageServiceSendMobileMessageResult(%+v)", *p)
}

// Attributes:
//  - Email
//  - Message
type MessageServiceSendEmailMessageArgs struct {
  Email string `thrift:"email,1" db:"email" json:"email"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewMessageServiceSendEmailMessageArgs() *MessageServiceSendEmailMessageArgs {
  return &MessageServiceSendEmailMessageArgs{}
}


func (p *MessageServiceSendEmailMessageArgs) GetEmail() string {
  return p.Email
}

func (p *MessageServiceSendEmailMessageArgs) GetMessage() string {
  return p.Message
}
func (p *MessageServiceSendEmailMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageServiceSendEmailMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *MessageServiceSendEmailMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *MessageServiceSendEmailMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEmailMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageServiceSendEmailMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:email: ", p), err) }
  return err
}

func (p *MessageServiceSendEmailMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *MessageServiceSendEmailMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageServiceSendEmailMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MessageServiceSendEmailMessageResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMessageServiceSendEmailMessageResult() *MessageServiceSendEmailMessageResult {
  return &MessageServiceSendEmailMessageResult{}
}

var MessageServiceSendEmailMessageResult_Success_DEFAULT bool
func (p *MessageServiceSendEmailMessageResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return MessageServiceSendEmailMessageResult_Success_DEFAULT
  }
return *p.Success
}
func (p *MessageServiceSendEmailMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MessageServiceSendEmailMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageServiceSendEmailMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *MessageServiceSendEmailMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEmailMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageServiceSendEmailMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MessageServiceSendEmailMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageServiceSendEmailMessageResult(%+v)", *p)
}


